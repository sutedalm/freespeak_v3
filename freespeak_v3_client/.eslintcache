[{"D:\\Uni\\Mitschriften\\5. Semester\\BPG\\freespeak_v3\\freespeak_v3_client\\src\\index.js":"1","D:\\Uni\\Mitschriften\\5. Semester\\BPG\\freespeak_v3\\freespeak_v3_client\\src\\reportWebVitals.js":"2","D:\\Uni\\Mitschriften\\5. Semester\\BPG\\freespeak_v3\\freespeak_v3_client\\src\\App.js":"3","D:\\Uni\\Mitschriften\\5. Semester\\BPG\\freespeak_v3\\freespeak_v3_client\\src\\components\\VideoStream.js":"4","D:\\Uni\\Mitschriften\\5. Semester\\BPG\\freespeak_v3\\freespeak_v3_client\\src\\components\\PongExecutor.js":"5","D:\\Uni\\Mitschriften\\5. Semester\\BPG\\freespeak_v3\\freespeak_v3_client\\src\\components\\pong_canvas.js":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"8"},{"size":236,"mtime":1610813682584,"results":"10","hashOfConfig":"8"},{"size":2223,"mtime":1610813682586,"results":"11","hashOfConfig":"8"},{"size":287,"mtime":1610813682585,"results":"12","hashOfConfig":"8"},{"size":11646,"mtime":1610813682587,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"d6fgnw",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},"D:\\Uni\\Mitschriften\\5. Semester\\BPG\\freespeak_v3\\freespeak_v3_client\\src\\index.js",[],["30","31"],"D:\\Uni\\Mitschriften\\5. Semester\\BPG\\freespeak_v3\\freespeak_v3_client\\src\\reportWebVitals.js",[],"D:\\Uni\\Mitschriften\\5. Semester\\BPG\\freespeak_v3\\freespeak_v3_client\\src\\App.js",["32","33"],"D:\\Uni\\Mitschriften\\5. Semester\\BPG\\freespeak_v3\\freespeak_v3_client\\src\\components\\VideoStream.js",["34","35"],"import React, { useEffect, useState } from \"react\";\r\n\r\nimport * as faceapi from \"face-api.js\";\r\n\r\nfunction analyze(video) {\r\n  const canvas = faceapi.createCanvasFromMedia(video);\r\n  document.body.append(canvas);\r\n  const displaySize = { width: video.width, height: video.height };\r\n  faceapi.matchDimensions(canvas, displaySize);\r\n  setInterval(async () => {\r\n    const detections = await faceapi\r\n      .detectAllFaces(video, new faceapi.TinyFaceDetectorOptions())\r\n      .withFaceLandmarks()\r\n      .withFaceExpressions();\r\n    const resizedDetections = faceapi.resizeResults(detections, displaySize);\r\n    canvas.getContext(\"2d\").clearRect(0, 0, canvas.width, canvas.height);\r\n    faceapi.draw.drawDetections(canvas, resizedDetections);\r\n    faceapi.draw.drawFaceLandmarks(canvas, resizedDetections);\r\n    faceapi.draw.drawFaceExpressions(canvas, resizedDetections);\r\n  }, 100);\r\n}\r\nconst streamCamVideo = () => {\r\n  // input constraints\r\n  var constraints = { audio: true, video: { width: 1280, height: 720 } };\r\n  navigator.mediaDevices\r\n    .getUserMedia(constraints)\r\n    .then((mediaStream) => {\r\n      var video = document.getElementById(\"video\");\r\n\r\n      video.srcObject = mediaStream;\r\n      video.onloadedmetadata = function (e) {\r\n        video.play();\r\n      };\r\n      video.addEventListener(\"play\", analyze(video));\r\n      return video;\r\n    })\r\n    .catch(function (err) {\r\n      console.log(err.name + \": \" + err.message);\r\n    }); // always check for errors at the end.\r\n};\r\n\r\nasync function loadModels() {\r\n  await Promise.all([\r\n    faceapi.nets.tinyFaceDetector.loadFromUri(\"/models\"),\r\n    faceapi.nets.faceLandmark68Net.loadFromUri(\"/models\"),\r\n    faceapi.nets.faceRecognitionNet.loadFromUri(\"/models\"),\r\n    faceapi.nets.faceExpressionNet.loadFromUri(\"/models\"),\r\n  ]);\r\n}\r\n\r\nconst VideoStream = () => {\r\n  let video;\r\n\r\n  useEffect(() => {\r\n    console.log(\"Ich hab geladen\");\r\n\r\n    // video = document.getElementById(\"video\");\r\n    loadModels().then(() => {\r\n      const video = streamCamVideo();\r\n      analyze(video);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <video id=\"video\" width=\"720\" height=\"560\" autoPlay muted></video>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VideoStream;\r\n","D:\\Uni\\Mitschriften\\5. Semester\\BPG\\freespeak_v3\\freespeak_v3_client\\src\\components\\PongExecutor.js",["36","37"],"import React, { useEffect, useState } from \"react\";\r\nimport Pong, { DIRECTION } from './pong_canvas'\r\n\r\n\r\nconst PongExecutor = () => {\r\n    useEffect(() => {\r\n        Pong.initialize();\r\n      }, []);\r\n\r\n    return (\r\n        <canvas></canvas>\r\n    );\r\n};\r\n\r\nexport default PongExecutor;","D:\\Uni\\Mitschriften\\5. Semester\\BPG\\freespeak_v3\\freespeak_v3_client\\src\\components\\pong_canvas.js",["38"],"import PongExecutor from \"./PongExecutor\";\r\n\r\n// Global Variables\r\nvar DIRECTION = {\r\n\tIDLE: 0,\r\n\tUP: 1,\r\n\tDOWN: 2,\r\n\tLEFT: 3,\r\n\tRIGHT: 4\r\n};\r\n\r\nvar rounds = [5, 5, 3, 3, 2];\r\nvar colors = ['#1abc9c', '#2ecc71', '#3498db', '#e74c3c', '#9b59b6'];\r\n\r\n// The ball object (The cube that bounces back and forth)\r\nvar Ball = {\r\n\tnew: function (incrementedSpeed) {\r\n\t\treturn {\r\n\t\t\twidth: 18,\r\n\t\t\theight: 18,\r\n\t\t\tx: (this.canvas.width / 2) - 9,\r\n\t\t\ty: (this.canvas.height / 2) - 9,\r\n\t\t\tmoveX: DIRECTION.IDLE,\r\n\t\t\tmoveY: DIRECTION.IDLE,\r\n\t\t\tspeed: incrementedSpeed || 6\r\n\t\t};\r\n\t}\r\n};\r\n\r\n// The paddle object (The two lines that move up and down)\r\nvar Paddle = {\r\n\tnew: function (side) {\r\n\t\treturn {\r\n\t\t\twidth: 18,\r\n\t\t\theight: 70,\r\n\t\t\tx: side === 'left' ? 150 : this.canvas.width - 150,\r\n\t\t\ty: (this.canvas.height / 2) - 35,\r\n\t\t\tscore: 0,\r\n\t\t\tmove: DIRECTION.IDLE,\r\n\t\t\tspeed: 10\r\n\t\t};\r\n\t}\r\n};\r\n\r\nvar Game = {\r\n\tinitialize: function () {\r\n\t\tthis.canvas = document.querySelector('canvas');\r\n\t\tthis.context = this.canvas.getContext('2d');\r\n\r\n\t\tthis.canvas.width = 1400;\r\n\t\tthis.canvas.height = 1000;\r\n\r\n\t\tthis.canvas.style.width = (this.canvas.width / 2) + 'px';\r\n\t\tthis.canvas.style.height = (this.canvas.height / 2) + 'px';\r\n\r\n\t\tthis.player = Paddle.new.call(this, 'left');\r\n\t\tthis.paddle = Paddle.new.call(this, 'right');\r\n\t\tthis.ball = Ball.new.call(this);\r\n\r\n\t\tthis.paddle.speed = 8;\r\n\t\tthis.running = this.over = false;\r\n\t\tthis.turn = this.paddle;\r\n\t\tthis.timer = this.round = 0;\r\n\t\tthis.color = '#2c3e50';\r\n\r\n\t\tPong.menu();\r\n\t\tPong.listen();\r\n\t},\r\n\r\n\tendGameMenu: function (text) {\r\n\t\t// Change the canvas font size and color\r\n\t\tPong.context.font = '50px Courier New';\r\n\t\tPong.context.fillStyle = this.color;\r\n\r\n\t\t//Draw the rectangle behind the 'Press any key to begin' text.\r\n\t\tPong.context.fillRect(\r\n\t\t\tPong.canvas.width / 2 - 350,\r\n\t\t\tPong.canvas.height / 2 - 48,\r\n\t\t\t700,\r\n\t\t\t100\r\n\t\t);\r\n\r\n\t\t// Change the canvas color;\r\n\t\tPong.context.fillStyle = '#ffffff';\r\n\r\n\t\t// Draw the end game menu text ('Game Over' and 'Winner')\r\n\t\tPong.context.fillText(text,\r\n\t\t\tPong.canvas.width / 2,\r\n\t\t\tPong.canvas.height / 2 + 15\r\n\t\t);\r\n\r\n\t\tsetTimeout(function () {\r\n\t\t\tPong = Object.assign({}, Game);\r\n\t\t\tPong.initialize();\r\n\t\t}, 3000);\r\n\t},\r\n\r\n\tmenu: function () {\r\n\t\t// Draw all the Pong objects in their current state\r\n\t\tPong.draw();\r\n\r\n\t\t// Change the canvas font size and color\r\n\t\tthis.context.font = '50px Courier New';\r\n\t\tthis.context.fillStyle = this.color;\r\n\r\n\t\t// Draw the rectangle behind the 'Press any key to begin' text.\r\n\t\tthis.context.fillRect(\r\n\t\t\tthis.canvas.width / 2 - 350,\r\n\t\t\tthis.canvas.height / 2 - 48,\r\n\t\t\t700,\r\n\t\t\t100\r\n\t\t);\r\n\r\n\t\t// Change the canvas color;\r\n\t\tthis.context.fillStyle = '#ffffff';\r\n\r\n\t\t// Draw the 'press any key to begin' text\r\n\t\tthis.context.fillText('Press SPACE to begin!',\r\n\t\t\tthis.canvas.width / 2,\r\n\t\t\tthis.canvas.height / 2 + 15\r\n\t\t);\r\n\t},\r\n\r\n\t// Update all objects (move the player, paddle, ball, increment the score, etc.)\r\n\tupdate: function () {\r\n\t\tif (!this.over) {\r\n\t\t\t// If the ball collides with the bound limits - correct the x and y coords.\r\n            if (this.ball.x <= 0)\r\n                Pong._resetTurn.call(this, this.paddle, this.player);\r\n\r\n            if (this.ball.x >= this.canvas.width - this.ball.width)\r\n                Pong._resetTurn.call(this, this.player, this.paddle);\r\n\r\n            if (this.ball.y <= 0)\r\n                this.ball.moveY = DIRECTION.DOWN;\r\n\r\n            if (this.ball.y >= this.canvas.height - this.ball.height)\r\n                this.ball.moveY = DIRECTION.UP;\r\n\r\n\t\t\t// Move player if they player.move value was updated by a keyboard event\r\n            if (this.player.move === DIRECTION.UP)\r\n                this.player.y -= this.player.speed;\r\n\r\n            else if (this.player.move === DIRECTION.DOWN)\r\n                this.player.y += this.player.speed;\r\n\r\n\t\t\t// On new serve (start of each turn) move the ball to the correct side\r\n\t\t\t// and randomize the direction to add some challenge.\r\n\t\t\tif (Pong._turnDelayIsOver.call(this) && this.turn) {\r\n\t\t\t\tthis.ball.moveX = this.turn === this.player ? DIRECTION.LEFT : DIRECTION.RIGHT;\r\n\t\t\t\tthis.ball.moveY = [DIRECTION.UP, DIRECTION.DOWN][Math.round(Math.random())];\r\n\t\t\t\tthis.ball.y = Math.floor(Math.random() * this.canvas.height - 200) + 200;\r\n\t\t\t\tthis.turn = null;\r\n\t\t\t}\r\n\r\n\t\t\t// If the player collides with the bound limits, update the x and y coords.\r\n            if (this.player.y <= 0)\r\n                this.player.y = 0;\r\n            else if (this.player.y >= (this.canvas.height - this.player.height))\r\n                this.player.y = (this.canvas.height - this.player.height);\r\n\r\n\t\t\t// Move ball in intended direction based on moveY and moveX values\r\n            if (this.ball.moveY === DIRECTION.UP)\r\n                this.ball.y -= (this.ball.speed / 1.5);\r\n            else if (this.ball.moveY === DIRECTION.DOWN)\r\n                this.ball.y += (this.ball.speed / 1.5);\r\n\r\n            if (this.ball.moveX === DIRECTION.LEFT)\r\n                this.ball.x -= this.ball.speed;\r\n            else if (this.ball.moveX === DIRECTION.RIGHT)\r\n                this.ball.x += this.ball.speed;\r\n\r\n\t\t\t// Handle paddle (AI) UP and DOWN movement\r\n\t\t\tif (this.paddle.y > this.ball.y - (this.paddle.height / 2)) {\r\n                if (this.ball.moveX === DIRECTION.RIGHT)\r\n                    this.paddle.y -= this.paddle.speed / 1.5;\r\n                else\r\n                    this.paddle.y -= this.paddle.speed / 4;\r\n            }\r\n\r\n\t\t\tif (this.paddle.y < this.ball.y - (this.paddle.height / 2)) {\r\n                if (this.ball.moveX === DIRECTION.RIGHT)\r\n                    this.paddle.y += this.paddle.speed / 1.5;\r\n                else\r\n                    this.paddle.y += this.paddle.speed / 4;\r\n\t\t\t}\r\n\r\n\t\t\t// Handle paddle (AI) wall collision\r\n            if (this.paddle.y >= this.canvas.height - this.paddle.height)\r\n                this.paddle.y = this.canvas.height - this.paddle.height;\r\n            else if (this.paddle.y <= 0)\r\n                this.paddle.y = 0;\r\n\r\n\t\t\t// Handle Player-Ball collisions\r\n\t\t\tif (this.ball.x - this.ball.width <= this.player.x && this.ball.x >= this.player.x - this.player.width) {\r\n\t\t\t\tif (this.ball.y <= this.player.y + this.player.height && this.ball.y + this.ball.height >= this.player.y) {\r\n\t\t\t\t\tthis.ball.x = (this.player.x + this.ball.width);\r\n\t\t\t\t\tthis.ball.moveX = DIRECTION.RIGHT;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Handle paddle-ball collision\r\n\t\t\tif (this.ball.x - this.ball.width <= this.paddle.x && this.ball.x >= this.paddle.x - this.paddle.width) {\r\n\t\t\t\tif (this.ball.y <= this.paddle.y + this.paddle.height && this.ball.y + this.ball.height >= this.paddle.y) {\r\n\t\t\t\t\tthis.ball.x = (this.paddle.x - this.ball.width);\r\n\t\t\t\t\tthis.ball.moveX = DIRECTION.LEFT;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Handle the end of round transition\r\n        // Check to see if the player won the round.\r\n        if (this.player.score === rounds[this.round]) {\r\n\t\t\t// Check to see if there are any more rounds/levels left and display the victory screen if\r\n\t\t\t// there are not.\r\n\t\t\tif (!rounds[this.round + 1]) {\r\n\t\t\t\tthis.over = true;\r\n\t\t\t\tsetTimeout(function () { Pong.endGameMenu('Winner!'); }, 1000);\r\n\t\t\t} else {\r\n\t\t\t\t// If there is another round, reset all the values and increment the round number.\r\n\t\t\t\tthis.color = this._generateRoundColor();\r\n\t\t\t\tthis.player.score = this.paddle.score = 0;\r\n\t\t\t\tthis.player.speed += 0.5;\r\n\t\t\t\tthis.paddle.speed += 1;\r\n\t\t\t\tthis.ball.speed += 1;\r\n\t\t\t\tthis.round += 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Check to see if the paddle/AI has won the round.\r\n\t\telse if (this.paddle.score === rounds[this.round]) {\r\n\t\t\tPong.over = true;\r\n\t\t\tsetTimeout(function () { Pong.endGameMenu('Game Over!'); }, 1000);\r\n\t\t}\r\n\t},\r\n\r\n\t// Draw the objects to the canvas element\r\n\tdraw: function () {\r\n\t\t// Clear the Canvas\r\n\t\tthis.context.clearRect(\r\n\t\t\t0,\r\n\t\t\t0,\r\n\t\t\tthis.canvas.width,\r\n\t\t\tthis.canvas.height\r\n\t\t);\r\n\r\n\t\t// Set the fill style to black\r\n\t\tthis.context.fillStyle = this.color;\r\n\r\n\t\t// Draw the background\r\n\t\tthis.context.fillRect(\r\n\t\t\t0,\r\n\t\t\t0,\r\n\t\t\tthis.canvas.width,\r\n\t\t\tthis.canvas.height\r\n\t\t);\r\n\r\n\t\t// Set the fill style to white (For the paddles and the ball)\r\n\t\tthis.context.fillStyle = '#ffffff';\r\n\r\n\t\t// Draw the Player\r\n\t\tthis.context.fillRect(\r\n\t\t\tthis.player.x,\r\n\t\t\tthis.player.y,\r\n\t\t\tthis.player.width,\r\n\t\t\tthis.player.height\r\n\t\t);\r\n\r\n\t\t// Draw the Paddle\r\n\t\tthis.context.fillRect(\r\n\t\t\tthis.paddle.x,\r\n\t\t\tthis.paddle.y,\r\n\t\t\tthis.paddle.width,\r\n\t\t\tthis.paddle.height\r\n\t\t);\r\n\r\n\t\t// Draw the Ball\r\n\t\tif (Pong._turnDelayIsOver.call(this)) {\r\n\t\t\tthis.context.fillRect(\r\n\t\t\t\tthis.ball.x,\r\n\t\t\t\tthis.ball.y,\r\n\t\t\t\tthis.ball.width,\r\n\t\t\t\tthis.ball.height\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t// Draw the net (Line in the middle)\r\n\t\tthis.context.beginPath();\r\n\t\tthis.context.setLineDash([7, 15]);\r\n\t\tthis.context.moveTo((this.canvas.width / 2), this.canvas.height - 140);\r\n\t\tthis.context.lineTo((this.canvas.width / 2), 140);\r\n\t\tthis.context.lineWidth = 10;\r\n\t\tthis.context.strokeStyle = '#ffffff';\r\n\t\tthis.context.stroke();\r\n\r\n\t\t// Set the default canvas font and align it to the center\r\n\t\tthis.context.font = '100px Courier New';\r\n\t\tthis.context.textAlign = 'center';\r\n\r\n\t\t// Draw the players score (left)\r\n\t\tthis.context.fillText(\r\n\t\t\tthis.player.score.toString(),\r\n\t\t\t(this.canvas.width / 2) - 300,\r\n\t\t\t200\r\n\t\t);\r\n\r\n\t\t// Draw the paddles score (right)\r\n\t\tthis.context.fillText(\r\n\t\t\tthis.paddle.score.toString(),\r\n\t\t\t(this.canvas.width / 2) + 300,\r\n\t\t\t200\r\n\t\t);\r\n\r\n\t\t// Change the font size for the center score text\r\n\t\tthis.context.font = '30px Courier New';\r\n\r\n\t\t// Draw the winning score (center)\r\n\t\tthis.context.fillText(\r\n\t\t\t'Round ' + (Pong.round + 1),\r\n\t\t\t(this.canvas.width / 2),\r\n\t\t\t35\r\n\t\t);\r\n\r\n\t\t// Change the font size for the center score value\r\n\t\tthis.context.font = '40px Courier';\r\n\r\n\t\t// Draw the current round number\r\n\t\tthis.context.fillText(\r\n\t\t\trounds[Pong.round] ? rounds[Pong.round] : rounds[Pong.round - 1],\r\n\t\t\t(this.canvas.width / 2),\r\n\t\t\t100\r\n\t\t);\r\n\t},\r\n\r\n\tloop: function () {\r\n\t\tPong.update();\r\n\t\tPong.draw();\r\n\r\n\t\t// If the game is not over, draw the next frame.\r\n        if (!Pong.over)\r\n            requestAnimationFrame(Pong.loop);\r\n\t},\r\n\r\n\tlisten: function () {\r\n\t\tdocument.addEventListener('keydown', function (key) {\r\n            if(key.keyCode === 32) {\r\n\t\t\t// Handle the 'Press any key to begin' function and start the game.\r\n\t\t\tif (Pong.running === false) {\r\n\t\t\t\tPong.running = true;\r\n\t\t\t\twindow.requestAnimationFrame(Pong.loop);\r\n            }\r\n        }\r\n\t\t\t// Handle up arrow and w key events\r\n\t\t\tif (key.keyCode === 38 || key.keyCode === 87) Pong.player.move = DIRECTION.UP;\r\n\r\n\t\t\t// Handle down arrow and s key events\r\n\t\t\tif (key.keyCode === 40 || key.keyCode === 83) Pong.player.move = DIRECTION.DOWN;\r\n\t\t});\r\n\r\n\t\t// Stop the player from moving when there are no keys being pressed.\r\n\t\tdocument.addEventListener('keyup', function (key) {\r\n             Pong.player.move = DIRECTION.IDLE;\r\n        });\r\n\t},\r\n\r\n\t// Reset the ball location, the player turns and set a delay before the next round begins.\r\n\t_resetTurn: function(victor, loser) {\r\n\t\tthis.ball = Ball.new.call(this, this.ball.speed);\r\n\t\tthis.turn = loser;\r\n\t\tthis.timer = (new Date()).getTime();\r\n\r\n\t\tvictor.score++;\r\n\t},\r\n\r\n\t// Wait for a delay to have passed after each turn.\r\n\t_turnDelayIsOver: function() {\r\n\t\treturn ((new Date()).getTime() - this.timer >= 1000);\r\n\t},\r\n\r\n\t// Select a random color as the background of each level/round.\r\n\t_generateRoundColor: function () {\r\n\t\tvar newColor = colors[Math.floor(Math.random() * colors.length)];\r\n\t\tif (newColor === this.color) return Pong._generateRoundColor();\r\n\t\treturn newColor;\r\n\t}\r\n};\r\n\r\nlet Pong = Object.assign({}, Game);\r\nexport default Pong",{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":1,"column":8,"nodeType":"45","messageId":"46","endLine":1,"endColumn":12},{"ruleId":"43","severity":1,"message":"47","line":3,"column":8,"nodeType":"45","messageId":"46","endLine":3,"endColumn":19},{"ruleId":"43","severity":1,"message":"48","line":2,"column":28,"nodeType":"45","messageId":"46","endLine":2,"endColumn":36},{"ruleId":"43","severity":1,"message":"49","line":30,"column":11,"nodeType":"45","messageId":"46","endLine":30,"endColumn":17},{"ruleId":"43","severity":1,"message":"48","line":1,"column":28,"nodeType":"45","messageId":"46","endLine":1,"endColumn":36},{"ruleId":"43","severity":1,"message":"50","line":2,"column":16,"nodeType":"45","messageId":"46","endLine":2,"endColumn":25},{"ruleId":"43","severity":1,"message":"51","line":1,"column":8,"nodeType":"45","messageId":"46","endLine":1,"endColumn":20},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'VideoStream' is defined but never used.","'useState' is defined but never used.","'canvas' is assigned a value but never used.","'DIRECTION' is defined but never used.","'PongExecutor' is defined but never used.","no-global-assign","no-unsafe-negation"]