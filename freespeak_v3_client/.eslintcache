[{"D:\\Uni\\Random Projects\\Freespeak_v3\\freespeak_v3\\freespeak_v3_client\\src\\index.js":"1","D:\\Uni\\Random Projects\\Freespeak_v3\\freespeak_v3\\freespeak_v3_client\\src\\reportWebVitals.js":"2","D:\\Uni\\Random Projects\\Freespeak_v3\\freespeak_v3\\freespeak_v3_client\\src\\App.js":"3","D:\\Uni\\Random Projects\\Freespeak_v3\\freespeak_v3\\freespeak_v3_client\\src\\pages\\components\\VideoStream.js":"4","D:\\Uni\\Random Projects\\Freespeak_v3\\freespeak_v3\\freespeak_v3_client\\src\\pages\\components\\helpPopUp.js":"5","D:\\Uni\\Random Projects\\Freespeak_v3\\freespeak_v3\\freespeak_v3_client\\src\\pages\\components\\PongExecutor.js":"6","D:\\Uni\\Random Projects\\Freespeak_v3\\freespeak_v3\\freespeak_v3_client\\src\\pages\\components\\pong_canvas.js":"7","D:\\Uni\\Random Projects\\Freespeak_v3\\freespeak_v3\\freespeak_v3_client\\src\\pages\\components\\MenuButtons.js":"8","D:\\Uni\\Random Projects\\Freespeak_v3\\freespeak_v3\\freespeak_v3_client\\src\\pages\\components\\GameInfo.js":"9","D:\\Uni\\Random Projects\\Freespeak_v3\\freespeak_v3\\freespeak_v3_client\\src\\pages\\PongPage.js":"10"},{"size":517,"mtime":1610803386000,"results":"11","hashOfConfig":"12"},{"size":375,"mtime":1610803386000,"results":"13","hashOfConfig":"12"},{"size":823,"mtime":1610938528000,"results":"14","hashOfConfig":"12"},{"size":3683,"mtime":1610937684000,"results":"15","hashOfConfig":"12"},{"size":1059,"mtime":1610828398000,"results":"16","hashOfConfig":"12"},{"size":946,"mtime":1610848478000,"results":"17","hashOfConfig":"12"},{"size":12372,"mtime":1610936742000,"results":"18","hashOfConfig":"12"},{"size":590,"mtime":1610929382000,"results":"19","hashOfConfig":"12"},{"size":542,"mtime":1610938160000,"results":"20","hashOfConfig":"12"},{"size":2059,"mtime":1611418918000,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1yya60l",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"24"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Uni\\Random Projects\\Freespeak_v3\\freespeak_v3\\freespeak_v3_client\\src\\index.js",[],["47","48"],"D:\\Uni\\Random Projects\\Freespeak_v3\\freespeak_v3\\freespeak_v3_client\\src\\reportWebVitals.js",[],"D:\\Uni\\Random Projects\\Freespeak_v3\\freespeak_v3\\freespeak_v3_client\\src\\App.js",[],"D:\\Uni\\Random Projects\\Freespeak_v3\\freespeak_v3\\freespeak_v3_client\\src\\pages\\components\\VideoStream.js",["49","50"],"\r\nimport React, { useEffect} from \"react\";\r\n\r\nimport * as faceapi from \"face-api.js\";\r\n\r\nconst VideoStream = ({ width, height, setEmotion}) => {\r\n  // async function test(video, canvas, displaySize) {\r\n  //   const detections = await faceapi\r\n  //       .detectAllFaces(video, new faceapi.TinyFaceDetectorOptions())\r\n  //       .withFaceExpressions();\r\n\r\n  //     console.log(detections)\r\n  //     const resizedDetections = faceapi.resizeResults(detections, displaySize);\r\n  //     canvas.getContext(\"2d\").clearRect(0, 0, width, canvas.height);\r\n  //     faceapi.draw.drawDetections(canvas, resizedDetections);\r\n  //     // faceapi.draw.drawFaceLandmarks(canvas, resizedDetections);\r\n  //     faceapi.draw.drawFaceExpressions(canvas, resizedDetections);\r\n\r\n  //     return detections;\r\n  // }\r\n\r\n  function analyze() {\r\n    const video = document.getElementById(\"video\");\r\n    const canvas = document.getElementById(\"canvas\");\r\n    const displaySize = { width: width, height: height };\r\n    faceapi.matchDimensions(canvas, displaySize);\r\n\r\n    setInterval(async () => {\r\n      // const detections = await faceapi\r\n      //   .detectAllFaces(video, new faceapi.TinyFaceDetectorOptions())\r\n      //   .withFaceExpressions();\r\n\r\n      const detections = await faceapi\r\n        .detectSingleFace(video, new faceapi.TinyFaceDetectorOptions())\r\n        .withFaceExpressions();\r\n\r\n      if(detections) {\r\n        setEmotion(detections.expressions);\r\n        const resizedDetections = faceapi.resizeResults(detections, displaySize);\r\n        canvas.getContext(\"2d\").clearRect(0, 0, width, canvas.height);\r\n        faceapi.draw.drawDetections(canvas, resizedDetections);\r\n        // faceapi.draw.drawFaceLandmarks(canvas, resizedDetections);\r\n        faceapi.draw.drawFaceExpressions(canvas, resizedDetections);\r\n        }\r\n    }, 100);\r\n    // setInterval(() => test(video, canvas, displaySize), 100);\r\n  }\r\n\r\n  const streamCamVideo = () => {\r\n    const video = document.getElementById(\"video\");\r\n    const canvas = document.getElementById(\"canvas\");\r\n    // input constraints\r\n    var constraints = { audio: true, video: { width: width, height: height } };\r\n    navigator.mediaDevices\r\n      .getUserMedia(constraints)\r\n      .then((mediaStream) => {\r\n        video.srcObject = mediaStream;\r\n        video.onloadedmetadata = function (e) {\r\n          video.play();\r\n        };\r\n      })\r\n      .catch(function (err) {\r\n        console.log(err.name + \": \" + err.message);\r\n      }); // always check for errors at the end.\r\n  };\r\n\r\n  async function loadModels() {\r\n    await Promise.all([\r\n      faceapi.nets.tinyFaceDetector.loadFromUri(\"/models\"),\r\n      faceapi.nets.faceLandmark68TinyNet.loadFromUri(\"/models\"),\r\n      faceapi.nets.faceExpressionNet.loadFromUri(\"/models\"),\r\n    ]);\r\n    // const MODEL_URL = \"/models\";\r\n    // await faceapi.nets.tinyFaceDetector.loadFromUri(MODEL_URL);\r\n    // await faceapi.nets.faceLandmark68TinyNet.loadFromUri(MODEL_URL);\r\n    // await faceapi.nets.faceExpressionNet.loadFromUri(MODEL_URL);\r\n    console.log(\"loaded models\");\r\n  }\r\n\r\n  useEffect(() => {\r\n    console.log(\"Ich hab geladen\");\r\n    streamCamVideo();\r\n\r\n    // video = document.getElementById(\"video\");\r\n    loadModels().then(analyze());\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"video-container\" width={width} height={height}>\r\n      <canvas\r\n        className=\"video-canvas\"\r\n        width={width}\r\n        height={height}\r\n        id=\"canvas\"\r\n      ></canvas>\r\n      <video\r\n        className=\"video-output\"\r\n        width={width}\r\n        height={height}\r\n        id=\"video\"\r\n        autoPlay\r\n        muted\r\n      ></video>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VideoStream;","D:\\Uni\\Random Projects\\Freespeak_v3\\freespeak_v3\\freespeak_v3_client\\src\\pages\\components\\helpPopUp.js",[],"D:\\Uni\\Random Projects\\Freespeak_v3\\freespeak_v3\\freespeak_v3_client\\src\\pages\\components\\PongExecutor.js",["51"],"import React, { useEffect, useState } from \"react\";\r\nimport Pong, { DIRECTION } from \"./pong_canvas\";\r\n\r\nconst PongExecutor = ({emotion}) => {\r\n  useEffect(() => {\r\n    Pong.initialize();\r\n    // handleEmotion(emotion);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    handleEmotion(emotion)\r\n  }, [emotion]);\r\n\r\n  function handleEmotion(em) {\r\n    // if (!pong) {\r\n    //   console.log('no pong canvas')\r\n    //   return\r\n    // }\r\n    console.log(Pong.running)\r\n\r\n    // if(Pong.running === false) {\r\n    //   Pong.running = true;\r\n    //   window.requestAnimationFrame(() => Pong.loop());\r\n    // }\r\n\r\n    if (Pong.running) {\r\n      if (em === 'happy')\r\n        Pong.player.move = DIRECTION.UP;\r\n\r\n      else if (em === 'surprised')\r\n        Pong.player.move = DIRECTION.DOWN;\r\n\r\n      else if (em === 'neutral')\r\n        Pong.player.move = DIRECTION.IDLE;\r\n    }\r\n  }\r\n\r\n  return <canvas id=\"pongCanvas\"></canvas>;\r\n};\r\n\r\nexport default PongExecutor;\r\n","D:\\Uni\\Random Projects\\Freespeak_v3\\freespeak_v3\\freespeak_v3_client\\src\\pages\\components\\pong_canvas.js",["52"],"import PongExecutor from \"./PongExecutor\";\r\n\r\n// Global Variables\r\nexport var DIRECTION = {\r\n  IDLE: 0,\r\n  UP: 1,\r\n  DOWN: 2,\r\n  LEFT: 3,\r\n  RIGHT: 4,\r\n};\r\n\r\nvar rounds = [3, 5, 3, 3, 2];\r\nvar colors = [\"#1abc9c\", \"#2ecc71\", \"#3498db\", \"#e74c3c\", \"#9b59b6\"];\r\n\r\n// The ball object (The cube that bounces back and forth)\r\nvar Ball = {\r\n  new: function (incrementedSpeed) {\r\n    return {\r\n      width: 18,\r\n      height: 18,\r\n      x: this.canvas.width / 2 - 9,\r\n      y: this.canvas.height / 2 - 9,\r\n      moveX: DIRECTION.IDLE,\r\n      moveY: DIRECTION.IDLE,\r\n      speed: incrementedSpeed || 6,\r\n    };\r\n  },\r\n};\r\n\r\n// The paddle object (The two lines that move up and down)\r\nvar Paddle = {\r\n  new: function (side) {\r\n    return {\r\n      width: 18,\r\n      height: 70,\r\n      x: side === \"left\" ? 150 : this.canvas.width - 150,\r\n      y: this.canvas.height / 2 - 35,\r\n      score: 0,\r\n      move: DIRECTION.IDLE,\r\n      speed: 10,\r\n    };\r\n  },\r\n};\r\n\r\nvar Game = {\r\n  initialize: function () {\r\n    this.canvas = document.getElementById(\"pongCanvas\");\r\n    this.context = this.canvas.getContext(\"2d\");\r\n    this.pScore = document.getElementById(\"playerScore\");\r\n    this.oScore = document.getElementById(\"oppScore\");\r\n    this.currentEmotion = document.getElementById(\"currentEmotion\");\r\n\r\n    this.canvas.width = 1400;\r\n    this.canvas.height = 1000;\r\n\r\n    this.canvas.style.width = this.canvas.width / 2 + \"px\";\r\n    this.canvas.style.height = this.canvas.height / 2 + \"px\";\r\n\r\n    this.player = Paddle.new.call(this, \"left\");\r\n    this.paddle = Paddle.new.call(this, \"right\");\r\n    this.ball = Ball.new.call(this);\r\n\r\n    this.paddle.speed = 8;\r\n    this.running = this.over = false;\r\n    this.turn = this.paddle;\r\n    this.timer = this.round = 0;\r\n    this.color = \"#2c3e50\";\r\n\r\n    Pong.menu();\r\n    Pong.listen();\r\n  },\r\n\r\n  endGameMenu: function (text) {\r\n    // Change the canvas font size and color\r\n    Pong.context.font = \"50px 'pixelFont'\";\r\n    Pong.context.fillStyle = this.color;\r\n\r\n    //Draw the rectangle behind the 'Press any key to begin' text.\r\n    Pong.context.fillRect(\r\n      Pong.canvas.width / 2 - 350,\r\n      Pong.canvas.height / 2 - 48,\r\n      700,\r\n      100\r\n    );\r\n\r\n    // Change the canvas color;\r\n    Pong.context.fillStyle = \"#ffffff\";\r\n\r\n    // Draw the end game menu text ('Game Over' and 'Winner')\r\n    Pong.context.fillText(\r\n      text,\r\n      Pong.canvas.width / 2,\r\n      Pong.canvas.height / 2 + 15\r\n    );\r\n\r\n    setTimeout(function () {\r\n      Pong = Game; //Object.assign({}, Game);\r\n      Pong.initialize();\r\n    }, 3000);\r\n  },\r\n\r\n  menu: function () {\r\n    // Draw all the Pong objects in their current state\r\n    Pong.draw();\r\n\r\n    // Change the canvas font size and color\r\n    this.context.font = \"50px 'pixelFont'\";\r\n    this.context.fillStyle = this.color;\r\n\r\n    // Draw the rectangle behind the 'Press any key to begin' text.\r\n    this.context.fillRect(\r\n      this.canvas.width / 2 - 350,\r\n      this.canvas.height / 2 - 48,\r\n      700,\r\n      100\r\n    );\r\n\r\n    // Change the canvas color;\r\n    this.context.fillStyle = \"#ffffff\";\r\n\r\n    // Draw the 'press any key to begin' text\r\n    this.context.fillText(\r\n      \"Press SPACE to begin!\",\r\n      this.canvas.width / 2,\r\n      this.canvas.height / 2 + 15\r\n    );\r\n  },\r\n\r\n  // Update all objects (move the player, paddle, ball, increment the score, etc.)\r\n  update: function () {\r\n    if (!this.over) {\r\n      // If the ball collides with the bound limits - correct the x and y coords.\r\n      if (this.ball.x <= 0)\r\n        Pong._resetTurn.call(this, this.paddle, this.player);\r\n\r\n      if (this.ball.x >= this.canvas.width - this.ball.width)\r\n        Pong._resetTurn.call(this, this.player, this.paddle);\r\n\r\n      if (this.ball.y <= 0) this.ball.moveY = DIRECTION.DOWN;\r\n\r\n      if (this.ball.y >= this.canvas.height - this.ball.height)\r\n        this.ball.moveY = DIRECTION.UP;\r\n\r\n      // Move player if they player.move value was updated by a keyboard event\r\n      if (this.player.move === DIRECTION.UP) {\r\n          this.player.y -= this.player.speed;\r\n          this.currentEmotion.innerHTML = 'Happy';\r\n      } \r\n      else if (this.player.move === DIRECTION.DOWN) {\r\n        this.player.y += this.player.speed;\r\n        this.currentEmotion.innerHTML = 'Surprised';\r\n      }\r\n      // On new serve (start of each turn) move the ball to the correct side\r\n      // and randomize the direction to add some challenge.\r\n      if (Pong._turnDelayIsOver.call(this) && this.turn) {\r\n        this.ball.moveX =\r\n          this.turn === this.player ? DIRECTION.LEFT : DIRECTION.RIGHT;\r\n        this.ball.moveY = [DIRECTION.UP, DIRECTION.DOWN][\r\n          Math.round(Math.random())\r\n        ];\r\n        this.ball.y =\r\n          Math.floor(Math.random() * this.canvas.height - 200) + 200;\r\n        this.turn = null;\r\n      }\r\n\r\n      // If the player collides with the bound limits, update the x and y coords.\r\n      if (this.player.y <= 0) this.player.y = 0;\r\n      else if (this.player.y >= this.canvas.height - this.player.height)\r\n        this.player.y = this.canvas.height - this.player.height;\r\n\r\n      // Move ball in intended direction based on moveY and moveX values\r\n      if (this.ball.moveY === DIRECTION.UP)\r\n        this.ball.y -= this.ball.speed / 1.5;\r\n      else if (this.ball.moveY === DIRECTION.DOWN)\r\n        this.ball.y += this.ball.speed / 1.5;\r\n\r\n      if (this.ball.moveX === DIRECTION.LEFT) this.ball.x -= this.ball.speed;\r\n      else if (this.ball.moveX === DIRECTION.RIGHT)\r\n        this.ball.x += this.ball.speed;\r\n\r\n      // Handle paddle (AI) UP and DOWN movement\r\n      if (this.paddle.y > this.ball.y - this.paddle.height / 2) {\r\n        if (this.ball.moveX === DIRECTION.RIGHT)\r\n          this.paddle.y -= this.paddle.speed / 1.5;\r\n        else this.paddle.y -= this.paddle.speed / 4;\r\n      }\r\n\r\n      if (this.paddle.y < this.ball.y - this.paddle.height / 2) {\r\n        if (this.ball.moveX === DIRECTION.RIGHT)\r\n          this.paddle.y += this.paddle.speed / 1.5;\r\n        else this.paddle.y += this.paddle.speed / 4;\r\n      }\r\n\r\n      // Handle paddle (AI) wall collision\r\n      if (this.paddle.y >= this.canvas.height - this.paddle.height)\r\n        this.paddle.y = this.canvas.height - this.paddle.height;\r\n      else if (this.paddle.y <= 0) this.paddle.y = 0;\r\n\r\n      // Handle Player-Ball collisions\r\n      if (\r\n        this.ball.x - this.ball.width <= this.player.x &&\r\n        this.ball.x >= this.player.x - this.player.width\r\n      ) {\r\n        if (\r\n          this.ball.y <= this.player.y + this.player.height &&\r\n          this.ball.y + this.ball.height >= this.player.y\r\n        ) {\r\n          this.ball.x = this.player.x + this.ball.width;\r\n          this.ball.moveX = DIRECTION.RIGHT;\r\n        }\r\n      }\r\n\r\n      // Handle paddle-ball collision\r\n      if (\r\n        this.ball.x - this.ball.width <= this.paddle.x &&\r\n        this.ball.x >= this.paddle.x - this.paddle.width\r\n      ) {\r\n        if (\r\n          this.ball.y <= this.paddle.y + this.paddle.height &&\r\n          this.ball.y + this.ball.height >= this.paddle.y\r\n        ) {\r\n          this.ball.x = this.paddle.x - this.ball.width;\r\n          this.ball.moveX = DIRECTION.LEFT;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Handle the end of round transition\r\n    // Check to see if the player won the round.\r\n    if (this.player.score === rounds[this.round]) {\r\n      // Check to see if there are any more rounds/levels left and display the victory screen if\r\n      // there are not.\r\n      if (!rounds[this.round + 1]) {\r\n        this.over = true;\r\n        setTimeout(function () {\r\n          Pong.endGameMenu(\"You won!\");\r\n        }, 1000);\r\n      } else {\r\n        // If there is another round, reset all the values and increment the round number.\r\n        this.color = this._generateRoundColor();\r\n        this.player.score = this.paddle.score = 0;\r\n        this.pScore.innerHTML = this.oScore.innerHTML = this.paddle.score;\r\n        this.player.speed += 0.5;\r\n        this.paddle.speed += 1;\r\n        this.ball.speed += 1;\r\n        this.round += 1;\r\n      }\r\n    }\r\n    // Check to see if the paddle/AI has won the round.\r\n    else if (this.paddle.score === rounds[this.round]) {\r\n      Pong.over = true;\r\n      setTimeout(function () {\r\n        Pong.endGameMenu(\"You lost!\");\r\n      }, 1000);\r\n    }\r\n  },\r\n\r\n  // Draw the objects to the canvas element\r\n  draw: function () {\r\n    // Clear the Canvas\r\n    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n    // Set the fill style to black\r\n    this.context.fillStyle = this.color;\r\n\r\n    // Draw the background\r\n    this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n    // Set the fill style to white (For the paddles and the ball)\r\n    this.context.fillStyle = \"#ffffff\";\r\n\r\n    // Draw the Player\r\n    this.context.fillRect(\r\n      this.player.x,\r\n      this.player.y,\r\n      this.player.width,\r\n      this.player.height\r\n    );\r\n\r\n    // Draw the Paddle\r\n    this.context.fillRect(\r\n      this.paddle.x,\r\n      this.paddle.y,\r\n      this.paddle.width,\r\n      this.paddle.height\r\n    );\r\n\r\n    // Draw the Ball\r\n    if (Pong._turnDelayIsOver.call(this)) {\r\n      this.context.fillRect(\r\n        this.ball.x,\r\n        this.ball.y,\r\n        this.ball.width,\r\n        this.ball.height\r\n      );\r\n    }\r\n\r\n    // Draw the net (Line in the middle)\r\n    this.context.beginPath();\r\n    this.context.setLineDash([7, 15]);\r\n    this.context.moveTo(this.canvas.width / 2, this.canvas.height - 140);\r\n    this.context.lineTo(this.canvas.width / 2, 140);\r\n    this.context.lineWidth = 10;\r\n    this.context.strokeStyle = \"#ffffff\";\r\n    this.context.stroke();\r\n\r\n    // Set the default canvas font and align it to the center\r\n    this.context.font = \"100px 'pixelFont'\";\r\n    this.context.textAlign = \"center\";\r\n\r\n    // Draw the players score (left)\r\n    this.pScore.innerHTML = this.player.score;\r\n\r\n    // Draw the paddles score (right)\r\n    this.oScore.innerHTML = this.paddle.score;\r\n\r\n    // Change the font size for the center score text\r\n    this.context.font = \"30px 'pixelFont'\";\r\n\r\n    // Draw the winning score (center)\r\n    this.context.fillText(\r\n      \"Round \" + (Pong.round + 1),\r\n      this.canvas.width / 2,\r\n      35\r\n    );\r\n\r\n    // Change the font size for the center score value\r\n    this.context.font = \"40px 'pixelFont'\";\r\n\r\n    // Draw the current round number\r\n    this.context.fillText(\r\n      rounds[Pong.round] ? rounds[Pong.round] : rounds[Pong.round - 1],\r\n      this.canvas.width / 2,\r\n      100\r\n    );\r\n  },\r\n\r\n  loop: function () {\r\n    Pong.update();\r\n    Pong.draw();\r\n\r\n    \r\n\r\n    // If the game is not over, draw the next frame.\r\n    if (!Pong.over)\r\n      requestAnimationFrame(Pong.loop);\r\n  },\r\n\r\n  listen: function () {\r\n    document.addEventListener(\"keydown\", function (event) {\r\n      // Handle the 'Press any key to begin' function and start the game.\r\n      if (event.code === \"Space\") {\r\n        if (Pong.running === false) {\r\n          Pong.running = true;\r\n          window.requestAnimationFrame(Pong.loop);\r\n        }\r\n      }\r\n      // Handle up arrow and w key events\r\n    //   if (key.keyCode === 38 || key.keyCode === 87)\r\n    //     Pong.player.move = DIRECTION.UP;\r\n\r\n    //   // Handle down arrow and s key events\r\n    //   if (key.keyCode === 40 || key.keyCode === 83)\r\n    //     Pong.player.move = DIRECTION.DOWN;\r\n    // });\r\n\r\n    // // Stop the player from moving when there are no keys being pressed.\r\n    // document.addEventListener(\"keyup\", function (key) {\r\n    //   Pong.player.move = DIRECTION.IDLE;\r\n    });\r\n  },\r\n\r\n  // Reset the ball location, the player turns and set a delay before the next round begins.\r\n  _resetTurn: function (victor, loser) {\r\n    this.ball = Ball.new.call(this, this.ball.speed);\r\n    this.turn = loser;\r\n    this.timer = new Date().getTime();\r\n\r\n    victor.score++;\r\n  },\r\n\r\n  // Wait for a delay to have passed after each turn.\r\n  _turnDelayIsOver: function () {\r\n    return new Date().getTime() - this.timer >= 1000;\r\n  },\r\n\r\n  // Select a random color as the background of each level/round.\r\n  _generateRoundColor: function () {\r\n    var newColor = colors[Math.floor(Math.random() * colors.length)];\r\n    if (newColor === this.color) return Pong._generateRoundColor();\r\n    return newColor;\r\n  },\r\n};\r\n\r\nlet Pong = Game; //Object.assign({}, Game);\r\nexport default Pong;\r\n","D:\\Uni\\Random Projects\\Freespeak_v3\\freespeak_v3\\freespeak_v3_client\\src\\pages\\components\\MenuButtons.js",[],"D:\\Uni\\Random Projects\\Freespeak_v3\\freespeak_v3\\freespeak_v3_client\\src\\pages\\components\\GameInfo.js",["53","54"],"import '../../styles/MenuButtons.css'; \r\nimport React, { useEffect, useState } from \"react\"; \r\n\r\nconst GameInfo = () => {\r\n\r\n\r\n\r\n    return (\r\n        <div id = \"game-info\">\r\n            <br></br>\r\n            <h3>You</h3>\r\n            <h3 id = \"playerScore\">0</h3>\r\n            <br></br>\r\n            <h3>CPU</h3>\r\n            <h3 id = \"oppScore\">0</h3>\r\n            <br></br>\r\n            <h3>Current emotion:</h3>\r\n            <h3 id = \"currentEmotion\" >-</h3>\r\n            <br></br>\r\n        </div>\r\n    );\r\n} \r\n\r\nexport default GameInfo;","D:\\Uni\\Random Projects\\Freespeak_v3\\freespeak_v3\\freespeak_v3_client\\src\\pages\\PongPage.js",["55","56"],{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":51,"column":11,"nodeType":"63","messageId":"64","endLine":51,"endColumn":17},{"ruleId":"65","severity":1,"message":"66","line":86,"column":6,"nodeType":"67","endLine":86,"endColumn":8,"suggestions":"68"},{"ruleId":"61","severity":1,"message":"69","line":1,"column":28,"nodeType":"63","messageId":"64","endLine":1,"endColumn":36},{"ruleId":"61","severity":1,"message":"70","line":1,"column":8,"nodeType":"63","messageId":"64","endLine":1,"endColumn":20},{"ruleId":"61","severity":1,"message":"71","line":2,"column":17,"nodeType":"63","messageId":"64","endLine":2,"endColumn":26},{"ruleId":"61","severity":1,"message":"69","line":2,"column":28,"nodeType":"63","messageId":"64","endLine":2,"endColumn":36},{"ruleId":"61","severity":1,"message":"72","line":2,"column":10,"nodeType":"63","messageId":"64","endLine":2,"endColumn":18},{"ruleId":"61","severity":1,"message":"73","line":2,"column":19,"nodeType":"63","messageId":"64","endLine":2,"endColumn":23},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"no-unused-vars","'canvas' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'analyze' and 'streamCamVideo'. Either include them or remove the dependency array.","ArrayExpression",["76"],"'useState' is defined but never used.","'PongExecutor' is defined but never used.","'useEffect' is defined but never used.","'Redirect' is defined but never used.","'Link' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"77","fix":"78"},"Update the dependencies array to be: [analyze, streamCamVideo]",{"range":"79","text":"80"},[3241,3243],"[analyze, streamCamVideo]"]